schemas:
  ContainerTarget:
    type: object
    description: The target defines "where" you found this scan result.
    properties:
      image:
        type: string
  Fact:
    type: object
    description: The thing you found.
    properties:
      type:
        $ref: "#/schemas/FactType"
      data: {}
  FactType:
    type: string
    enum:
      - autoDetectedUserInstructions
      - binaries
      - depGraph
      - dockerfileAnalysis
      - dockerLayers
      - imageCreationTime
      - imageId
      - imageLabels
      - imageLayers
      - imageManifestFiles
      - imageNames
      - imageOsReleasePrettyName
      - imageSizeBytes
      - hashes
      - jarFingerprints
      - keyBinariesHashes
      - loadedPackages
      - redHatRepositories
      - rootFs
      - testedFiles
      - workloadMetadata
  Identity:
    type: object
    description: Identity defines "what" you found.
    properties:
      type:
        type: string
        description: Ecosystem type
        example: deb
      targetFile:
        type: string
      args:
        type: object
        additionalProperties:
          type: string
  KubernetesTarget:
    type: object
    description: The target defines "where" you found this scan result for kubernetes.
    properties:
      cluster:
        type: string
      fullLocator:
        type: string
      id:
        type: string
      image:
        type: string
      name:
        type: string
  ScanResult:
    type: object
    properties:
      name:
        type: string
        description: User-friendly name to use as the name of the Project that Snyk creates.
      policy:
        type: string
        description: Contains the Snyk policy file content.
      target:
        anyOf:
          - $ref: "#/schemas/ContainerTarget"
          - $ref: "#/schemas/KubernetesTarget"
      identity:
        $ref: "#/schemas/Identity"
      facts:
        type: array
        items:
          $ref: "#/schemas/Fact"
